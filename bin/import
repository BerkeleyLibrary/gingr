# frozen_string_literal: true

require 'thor'
require_relative '../lib/data_handler'
require_relative '../lib/solr_indexer'
require_relative '../lib/geoserver_publisher'
require 'find'
require 'json'

# Gingr module
module Gingr
  include Gingr::Config
  # ingestion tasks
  class Import < Thor
    desc 'solr index within directory', 'Index json files from a directory to solr'
    option :download_url
    option :geoserver_url
    option :geoserver_secure_url
    option :update_reference_field, type: :boolean, default: false
    option :solr_url
    def solr(dir_path)
      reference_domain_names = get_domain_names(options)
      url = options[:solr_url] || ENV.fetch('SOLR_URL', nil)
      index_solr_from_dir(dir_path, url, reference_domain_names)
    end

    desc 'publish a geofile', 'tt'
    # long_desc <<-LONGDESC
    #      publish a geofile with inputs of file basename and access type to geoserver,#{' '}
    #      the geofile should have been already moved to geoserver before runng this task'
    # LONGDESC
    option :geoserver_url
    option :geoserver_root
    option :public_access, type: :boolean, default: true
    def geoserver(filename)
      env_url = options[:public_access] ? ENV.fetch('GEOSERVER_URL', nil) : ENV.fetch('GEOSERVER_SECURE_URL', nil)
      url = options[:geoserver_url] || env_url

      publisher = GeoserverPublisher.new(url)
      publisher.update(filename)
    end

    desc 'unpack zip file to a directory', 'unpack a zip file to a directory'
    option :spatial_root
    option :geoserver_root
    def unpack(zipfile)
      zipfile_path = File.join(root_path, 'import', zipfile)
      puts(zipfile_path)
      DataHandler.spatial_root = options[:spatial_root] || ENV.fetch('SPATIAL_ROOT', nil)
      DataHandler.geoserver_root = options[:geoserver_root] || ENV.fetch('GEOSERVER_ROOT', nil)

      temp_path = File.join(Dir.pwd, 'tmp')
      DataHandler.extract_and_move(zipfile_path, temp_path)
    end

    desc 'move, index and publish all files to related servers', 'tt'
    # long_desc <<-LONGDESC
    #       1) move all souce files and metadata files to apache server,#{' '}
    #       2) index all geoblacklight json files to solr,#{' '}
    #       3) publish all geofiles to geoserver
    # LONGDESC
    option :solr_url
    option :update_reference_field, type: :boolean, default: false
    option :spatial_root
    option :geoserver_root
    option :geoserver_url
    option :geoserver_secure_url
    def all(zipfile)
      zipfile_path = File.join(root_path, 'import', zipfile)
      unpacked = unpack(zipfile_path)
      solr(unpacked[:extract_to_path])

      geofile_names = unpacked[:geofile_name_hash]
      publish_geoservers(geofile_names, options)
    end

    def self.exit_on_failure?
      true
    end

    private

    def publish_geoservers(geofile_names, options)
      url = options[:geoserver_url] || ENV.fetch('GEOSERVER_URL', nil)
      publisher = GeoserverPublisher.new(url)
      publisher.batch_update(geofile_names[:public])

      url = options[:geoserver_secure_url] || ENV.fetch('GEOSERVER_SECURE_URL', nil)
      publisher = GeoserverPublisher.new(url)
      publisher.batch_update(geofile_names[:ucb])
    end

    def index_solr_from_dir(directory_path, url, reference_domain_names)
      indexer = SolrIndexer.new(url, reference_domain_names)
      Find.find(directory_path) do |path|
        next unless File.extname(path).downcase == '.json'

        indexer.update(path)
      rescue RSolr::Error::Http => e
        puts "Response body: #{e.response}"
      end
      indexer.solr.commit
    end

    def get_domain_names(options)
      update_reference_field = options[:update_reference_field]
      return {} unless update_reference_field

      hash = {}
      Config.domain_names.each_key do |key|
        url = options[key.to_s] || ENV.fetch("#{key.upcase}_URL")
        hash[key.to_s] = domain_name(url) if url
      end
      hash
    end

    def domain_name(url)
      uri = URI(url)
      uri.host
    end

    def root_path
      File.expand_path('..', __dir__)
    end
  end
end
Gingr::Import.start(ARGV)
