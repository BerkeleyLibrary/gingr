# frozen_string_literal: true

require 'thor'
require_relative '../lib/data_handler'
require_relative '../lib/solr_indexer'
require_relative '../lib/geoserver_publisher'
require 'find'
require 'json'

# Gingr module
module Gingr
  include Gingr::Config
  # ingestion tasks
  class Import < Thor
    desc 'solr index within directory', 'Index json files from a directory to solr'
    option :download_url
    option :geoserver_url
    option :geoserver_secure_url
    option :solr_url
    option :update_reference_field, type: :boolean, default: false
    def solr(dir_path)
      update_reference_urls(options)

      url = options[:solr_url] || ENV['SOLR_URL']
      update_reference_field = options[:update_reference_field]
      index_solr_from_dir(dir_path, url, update_reference_field)
    end

    desc 'publish a geofile', 'tt'
    # long_desc <<-LONGDESC
    #      publish a geofile with inputs of file basename and access type to geoserver,#{' '}
    #      the geofile should have been already moved to geoserver before runng this task'
    # LONGDESC
    option :geoserver_url
    option :geoserver_root
    def geoserver(filename, access)
      root = options[:geoserver_root] || ENV['GEOSERVER_ROOT']
      env_url = access == 'public' ? ENV['GEOSERVER_URL'] : ENV['GEOSERVER_SECURE_URL']
      url = options[:geoserver_url] || env_url

      publisher = GeoserverPublisher.new(url, root, access)
      publisher.update(filename)
    end

    desc 'unpack zip file to a directory', 'unpack a zip file to a directory'
    option :spatial_root
    option :geoserver_root
    def unpack(zipfile)
      DataHandler.spatial_root = options[:spatial_root] || ENV['SPATIAL_ROOT']
      DataHandler.geoserver_root = options[:geoserver_root] || ENV['GEOSERVER_ROOT']

      temp_path = File.join(Dir.pwd, 'temp')
      DataHandler.extract_move(zipfile, temp_path)
    end

    desc 'move, index and publish all files to related servers', 'tt'
    # long_desc <<-LONGDESC
    #       1) move all souce files and metadata files to apache server,#{' '}
    #       2) index all geoblacklight json files to solr,#{' '}
    #       3) publish all geofiles to geoserver
    # LONGDESC
    option :solr_url
    option :change_reference_domain, type: :boolean, default: false
    option :spatial_root
    option :geoserver_root
    option :geoserver_url
    option :geoserver_secure_url
    def all(zipfile)
      unpacked_dirs = unpack(zipfile)
      solr(unpacked_dirs[:jsonfile_dir_list])

      geofile_dirs = unpacked_dirs[:geofile_name_hash]
      root = options[:geoserver_root] || ENV['GEOSERVER_ROOT']
      geoserver_url = options[:geoserver_url] || ENV['GEOSERVER_URL']
      geoserver_secure_url = options[:geoserver_secure_ulr] || ENV['GEOSERVER_SECURE_URL']
      publish_geoservers(geoserver_url, geoserver_secure_url, root, geofile_dirs)
    end

    def self.exit_on_failure?
      true
    end

    private

    def publish_geoservers(url, secure_url, root, geofile_dirs)
      publisher = GeoserverPublisher.new(url, root, 'public')
      publisher.batch_update(geofile_dirs[:public])

      secure_publisher = GeoserverPublisher.new(secure_url, root, 'UCB')
      secure_publisher.batch_update(geofile_dirs[:ucb])
    end

    # For changing reference domains, default are from ENV
    def update_reference_urls(options)
      download_url = options[:download_url]
      geoserver_url = options[:geoserver_url]
      geoserver_secure_url = options[:geoserver_secure_ulr]

      SolrIndexerIndex.download_url = download_url if download_url
      SolrIndexerIndex.geoserver_url = geoserver_url if geoserver_url
      SolrIndexerIndex.geoserver_secure_ul = geoserver_secure_url if geoserver_secure_url
    end

    def index_solr_from_dir(directory_path, url, update_reference_field)
      indexer = SolrIndexer.new(url)
      Find.find(directory_path) do |path|
        next unless File.extname(path).downcase == '.json'

        indexer.update(path, update_reference_field)
      rescue RSolr::Error::Http => e
        puts "Response body: #{e.response}"
      end
      indexer.solr.commit
    end
  end
end
Gingr::Import.start(ARGV)
