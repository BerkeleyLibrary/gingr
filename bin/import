# frozen_string_literal: true

require 'thor'
require_relative '../lib/data_handler'
require_relative '../lib/solr_indexer'
require_relative '../lib/geoserver_publisher'
require_relative '../lib/util'
require 'find'
require 'json'

# Gingr module
module Gingr
  include Gingr::Config
  include Gingr::Util

  # ingestion tasks
  class Import < Thor
    Thor.check_unknown_options!

    desc 'solr index within directory',
         'It will index json files to solr from this directory and sub-directories'
    option :download_url
    option :geoserver_url
    option :geoserver_secure_url
    option :update_reference_field, type: :boolean, default: false
    option :solr_url
    def solr(dir_path)
      reference_urls = Util.get_reference_urls(options)
      solr_url = options[:solr_url] || ENV.fetch('SOLR_URL', nil)
      Util.index_solr_from_dir(dir_path, solr_url, reference_urls)
    end

    desc 'publish a geofile', 'publish a shapefile or GeoTIFF file'
    long_desc <<-LONGDESC
         examples: 1) ruby bin/import geoserver fk4cr7f93g.shp
                   2) ruby bin/import geoserver fk4cr7f93g.shp  --is_public=false
    LONGDESC
    option :geoserver_url
    option :geoserver_root
    option :is_public, type: :boolean, default: true
    def geoserver(filename)
      url = options[:geoserver_url]
      url ||= options[:is_public] ? ENV.fetch('GEOSERVER_URL', nil) : ENV.fetch('GEOSERVER_SECURE_URL', nil)
      publisher = GeoserverPublisher.new(url)
      publisher.update(filename)
    end

    desc 'unpack a zip file to a directory', 'unpack a zip file: geofile to geoserver_root, other files to spatial_root'
    option :spatial_root
    option :geoserver_root
    def unpack(zipfile)
      zipfile_path = zipfile == File.basename(zipfile) ? File.join(Util.root_path, 'import', zipfile) : zipfile
      DataHandler.spatial_root = options[:spatial_root] || ENV.fetch('SPATIAL_ROOT', nil)
      DataHandler.geoserver_root = options[:geoserver_root] || ENV.fetch('GEOSERVER_ROOT', nil)

      temp_path = File.join(Dir.pwd, 'tmp')
      DataHandler.extract_and_move(zipfile_path, temp_path)
    end

    desc 'ingest zip file to solr, geoserver and apache server', 'Move, index and publish all files to related servers'
    long_desc <<-LONGDESC
          1) move all geofiles to geoserver_root
          2) move all data.zip, ISO19139.xml and document files to spatial_root
          2) index all geoblacklight json files to solr
          3) publish all geofiles to geoserver
    LONGDESC
    option :solr_url
    option :update_reference_field, type: :boolean, default: false
    option :spatial_root
    option :geoserver_root
    option :geoserver_url
    option :geoserver_secure_url
    def all(zipfile)
      unpacked = unpack(zipfile)
      solr(unpacked[:extract_to_path])

      geofile_names = unpacked[:geofile_name_hash]
      Util.publish_geoservers(geofile_names, options)
    end

    desc 'create a workspace in geoserver', 'create a workspace in geoserver'
    long_desc <<-LONGDESC
         This is for spec test. Geodata website only use one workspace "UCB"
    LONGDESC
    option :geoserver_url
    option :geoserver_root
    option :public_access, type: :boolean, default: true
    def geoserver_workspace(name)
      url = options[:geoserver_url]
      url ||= options[:public_access] ? ENV.fetch('GEOSERVER_URL', nil) : ENV.fetch('GEOSERVER_SECURE_URL', nil)
      publisher = GeoserverPublisher.new(url)
      publisher.create_workspace(name)
    end

    def self.exit_on_failure?
      true
    end
  end
end
Gingr::Import.start(ARGV)
